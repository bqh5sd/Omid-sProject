"""
Created on Tue Jul 11 10:05:38 2023
@author: Steffanie Jones
"""
#################################### Regression Module Information###################################
#please input a SMILES data set in the form of a CSV file with two columns: the SMILES string and the expected value

#Returns General Statistics About Four Regression techniques:
    #Linear Regression
    #Gaussian Regression
    #Decision Tree
    #Random Forest Regression
#Optimizes models using GridSearchCV function (sklearn module)
#focuses on R2, MSE, MAE, and R Pearson Correlation Coefficient values as outputs (to compare to other models)
#Current run time: ~40 minutes 
####################################################################################################

from sklearn.linear_model import LinearRegression
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor

from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error
from sklearn.gaussian_process.kernels import RBF

import pandas as pd
import numpy as np
import time
import datetime
from rdkit import Chem
from rdkit.Chem import AllChem

"""
This program begins by inputting the SMILES dataset and converting the SMILES to fingerprint datapoints that the program can process.
"""

#convert SMILES string to molecular fingerprint
def smiles_to_fingerprints(data_set, last_column):
    """
    Parameters
    ----------
    data_set : input the data csv file containing the SMILES to be converted to fingerprints.
    last_column : input the name of the data set to separate the expected results from the SMILES
    that will be converted to fingerprints.

    Returns
    -------
    X_data : the newly converted fingerprint datasets returned to be used in the regression models.
    y_data : the separated "expected" data values returned to be used in the regression models.

    """
    df = pd.read_csv(data_set, delimiter=",")

    #separate the SMILES dataset for processing
    smiles_dataset = df.drop(last_column, axis=1)
    input_smiles = smiles_dataset["smiles"]
    output_data = df[last_column]

    fingerprints = []

    # loop will go through each SMILE string in the clean dataset and convert them to MORGAN fingerprints
    # fingerprints are an object of rdkit so they need to be converted into a list object then added to a clean fingerprint list
    fingerprint_size = int(input("What is the length of the fingerprints? "))
    for smile in input_smiles:
        mol = Chem.MolFromSmiles(smile) 
        if mol is not None:
        # Generate the Morgan fingerprint for the molecule
            radius = 2
            fingerprint = AllChem.GetMorganFingerprintAsBitVect(mol, radius, fingerprint_size)
            fingerprints.append(fingerprint)

        else:
            print("Failed to load the molecule from SMILES.")
    #create a dataframe of all of the fingerprints to be used in the program
    fingerprint_arrays = [list(fp) for fp in fingerprints]
    df = pd.DataFrame(fingerprint_arrays)
 
    X_data = df
    y_data = output_data
    return X_data, y_data

def main():
    """
    Calls all four regression models, calls the calculate_stats function to return the R2, MSE, MAE,
    and R Pearson values, prints a final dataframe with a compatilation of stats from all four 
    models, prints the times when the program begins and ends.

    Returns
    -------
    None.

    """
    """
    This main function begins by transforming the SMILES input to fingerprints that the program can process
    """
    
    #1. read in csv file using pandas; make sure the file is in the same location as the Python interpreter being used
    data_set = input("Input the name of the csv file you would like to use: ")
    last_column = input("Input the name of the column with the expected/final data as it appears in the spreadsheet: ")

    #2. run the function through the smiles_to_fingerprints converter
    X_data, y_data = smiles_to_fingerprints(data_set, last_column)

    #3. run the program as normal with the newly converted fingerprint strands
    current_time = datetime.datetime.now()
    formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")
    print(f"This program was started at {formatted_time}")
    
    stats = linear_regression(X_data, y_data)
    
    stats1 = gaussian_regression(X_data, y_data)

    stats2 = decision_tree_regression(X_data, y_data)
    
    stats3 = random_forest_regression(X_data, y_data)

    #Make a list with all of the data collected by these models
    final_stats = [stats, stats1, stats2, stats3]

    #Create a dataframe of all of the data collected
    stats_df = pd.DataFrame(final_stats)

    #Change default row/column names in the dataframe
    index = stats_df.index
    columns = stats_df.columns

    index_list = index.tolist()
    column_list = columns.tolist()

    #Label the rows as the corresponding regression function
    index_list[0] = "Linear Regression"
    index_list[1] = "Gaussian Regression"
    index_list[2] = "Decision Tree Regression"
    index_list[3] = "Random Forest Regression"
    #Label the columns as the corresponding statistic
    column_list[0] = "R2"
    column_list[1] = "MSE"
    column_list[2] = "MAE"
    column_list[3] = "R Pearson"

    #add these names to the final data frame
    stats_df.index = index_list
    stats_df.columns = column_list

    #print the final results of the Regression Module!!
    print(stats_df)
    current_time = datetime.datetime.now()
    formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")
    print(f"This program concluded at {formatted_time}")

##################################################################################################

def calculate_stats(y_test, y_pred):
    """
    Function to calculate general statistics that can be applied to each specific model
    Notes: R2, MSE, and MAE calculated through sklearn module
    R Pearson correlation coefficient calculated through numpy module

    Parameters
    ----------
    y_test : The variable that is the true value of y in the dat aset
    y_pred : The variable that the regression model predicted as the value of y in the data set

    Returns
    -------
    stats : list of R2, MSE, MAE, and R Pearson correlation coefficient values for each specific regression model the function is used for

    """
    r2 = r2_score(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    pearson = np.corrcoef(y_test, y_pred)[0, 1]
    stats = [r2, mse, mae, pearson]
    return stats

##################################################################################################
#Linear Regression Model

#train/test split is consistantly 80/20 throughout this code
#random state values are set to 42, unless optimized using GridSearchCV
def linear_regression(X, y):
    """
    Implements a Linear Regression model on the inputted data

    Returns
    -------
    calculate_stats(y_test, y_pred) : a list of four statistics (R2 value, MSE value, MAE value, and R Pearson correlation 
    coefficient value to the main function to be included in the final dataframe)

    """
    start_time = time.time()
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)
    
    model = LinearRegression()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    
    end_time = time.time()
    
    total_time = end_time - start_time
    total_minutes = round((total_time/60), 3)
    print(f"Linear model took {total_minutes} minutes to run.")
    
    #Calculate Statistics 
    return calculate_stats(y_test, y_pred)
    
##################################################################################################
#Gaussian Process Regression Model

def gaussian_regression(X, y):
    """
    Implements a Gaussian Regression model with the inputted data

    Returns
    -------
    calculate_stats(y_test, y_pred) : returns same list as Linear Regression, except with the values achieved by the 
    Gaussian Model

    """
    start_time = time.time()
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)    
    kernel = RBF(length_scale = 1.0) 
    
    #Create final optimized Gaussian Process model 
    gp = GaussianProcessRegressor(kernel = kernel, alpha=0.001, normalize_y=True, random_state=42)

    gp.fit(X_train, y_train)  

    y_pred, std = gp.predict(X_test, return_std = True) 
    
    end_time = time.time()
    
    total_time = end_time - start_time
    total_minutes = round((total_time/60), 3)
    print(f"Gaussian model took {total_minutes} minutes to run.")
    
    #Calculate Gaussian Statistics
    return calculate_stats(y_test, y_pred)
#################################################################################################
#Decision Tree Model

def decision_tree_regression(X, y):
    """
    Implements a Decision Tree regression model with the inputted data

    Returns
    -------
    calculate_stats(y_test, y_pred) : list of statistics specific to the Decision Tree model's performance

    """
    
    start_time = time.time()
    
    #Split the data into a training set and a test set
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)
    
    
    tree1 = DecisionTreeRegressor()
    tree1.fit(X_train,y_train)
    
    #Using the model, predict values from the X test set
    y_pred=tree1.predict(X_test)
    
    end_time = time.time()
    
    total_time = end_time - start_time
    total_minutes = round((total_time/60), 3)
    print(f"Decision Tree model took {total_minutes} minutes to run.")
    
    #Calculate Decision Tree Stats
    return calculate_stats(y_test, y_pred)
#################################################################################################
#Random Forest Regression Model 

def random_forest_regression(X, y):
    """
    Implements a random forest regression model with the inputted data

    Returns
    -------
    calculate_stats(y_test, y_pred) : list of statistics specific to the random forest model's performance

    """
    
    start_time = time.time()
    
    #Split the data into a training set and a test set
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 5)
    
    #Code the final Random Forest model 
    forest = RandomForestRegressor(n_estimators = 500, min_samples_leaf = 1, random_state = 5, ccp_alpha = 0.001)
    forest.fit(X_train, y_train)
    
    #Predict test set data
    y_pred = forest.predict(X_test) 
    
    end_time = time.time()
    
    total_time = end_time - start_time
    total_minutes = round((total_time/60), 3)
    print(f"Random Forest model took {total_minutes} minutes to run.")
    
    #Calculate Random Forest Stats
    return calculate_stats(y_test, y_pred)
#################################################################################################
#Conclude program and call the main function
if __name__ == "__main__":
    main()
