"""
Created on Tue Jul 11 10:05:38 2023
@author: Steffanie Jones
"""
#################################### Regression Module Information###################################
#takes an input of a FINGERPRINT data set, must be a csv file with two groups(fingerprint and expected output)
#NOTE: These regression modules are not optimized, resulting in a code that will run more quickly but could also produce less accurate results

#Returns General Statistics About Four Regression techniques:
    #Linear Regression
    #Gaussian Regression
    #Decision Tree
    #Random Forest Regression
#focuses on R2, MSE, MAE, and R Pearson Correlation Coefficient values as outputs (to compare to other models)
#Current run time: ~15 minutes for a 4200 row data set
####################################################################################################
from sklearn.linear_model import LinearRegression
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor

from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error
from sklearn.gaussian_process.kernels import RBF

import pandas as pd
import numpy as np
import time
import datetime

def main():
    """
    Calls all four regression models, calls the calculate_stats function to return the r2, mse, mae,
    and r pearson values, prints a final dataframe with a compatilation of stats from all four 
    models, prints the times when the program begins and ends.

    Returns
    -------
    None.

    """
    
    data_set = input("Input the name of the csv file you would like to use: ")

    #Last column will be separated as "y", because this is the data the models will predict
    last_column = input("Input the name of the column with the expected/final data as it appears in the spreadsheet: ")
    df = pd.read_csv(data_set, delimiter=',')

    #define the x value (input properties) and true y outputs
    X_data = df.drop(last_column, axis = 1)
    y_data = df[last_column]
    
    current_time = datetime.datetime.now()
    formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")
    print(f"This program was started at {formatted_time}")
    
    #Call all four regression models and gather the statistics from them
    stats = linear_regression(X_data, y_data)
    
    stats1 = gaussian_regression(X_data, y_data)

    stats2 = decision_tree_regression(X_data, y_data)
    
    stats3 = random_forest_regression(X_data, y_data)

    #Make a list with all of the data collected by these models
    final_stats = [stats, stats1, stats2, stats3]

    #Create a dataframe of all of the data collected
    stats_df = pd.DataFrame(final_stats)

    #Change default row/column names in the dataframe
    index = stats_df.index
    columns = stats_df.columns
    index_list = index.tolist()
    column_list = columns.tolist()

    #Label the rows as the corresponding regression function
    index_list[0] = "Linear Regression"
    index_list[1] = "Gaussian Regression"
    index_list[2] = "Decision Tree Regression"
    index_list[3] = "Random Forest Regression"
    #Label the columns as the corresponding statistic
    column_list[0] = "R2 Value"
    column_list[1] = "MSE Value"
    column_list[2] = "MAE Value"
    column_list[3] = "R Pearson Value"

    #add these names to the final data frame
    stats_df.index = index_list
    stats_df.columns = column_list

    #print the final results of the Regression Module!!
    print(stats_df)
    current_time = datetime.datetime.now()
    formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")
    print(f"This program concluded at {formatted_time}")

##################################################################################################

def calculate_stats(y_test, y_pred):
    """
    Function to calculate general statistics that can be applied to each specific model
    Notes: r2, mse, and mae calculated through sklearn module
    r pearson correlation coefficient calculated through numpy module

    Parameters
    ----------
    y_test : The variable that is the true value of y in the dat aset
    y_pred : The variable that the regression model predicted as the value of y in the data set

    Returns
    -------
    stats : list of r2, mse, mae, and r pearson correlation coefficient values for each specific regression model the function is used for

    """
    r2 = r2_score(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    pearson = np.corrcoef(y_test, y_pred)[0, 1]
    stats = [r2, mse, mae, pearson]
    return stats

##################################################################################################
#Linear Regression Model

#train/test split is consistantly 80/20 throughout this code
#random state values are set to 42, unless optimized using GridSearchCV
def linear_regression(X, y):
    """
    Implements a linear regression model on the inputted data

    Returns
    -------
    calculate_stats(y_test, y_pred) : a list of four statistics (r2 value, mse value, mae value, and r pearson correlation 
    coefficient value) to the main function to be included in the final dataframe

    """
    start_time = time.time()
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)
    
    model = LinearRegression()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    
    end_time = time.time()
    
    total_time = end_time - start_time
    total_minutes = round((total_time/60), 3)
    print(f"Linear model took {total_minutes} minutes to run.")
    
    #Calculate Statistics 
    return calculate_stats(y_test, y_pred)
    
##################################################################################################
#Gaussian Process Regression Model (Optimized)

def gaussian_regression(X, y):
    """
    Implements a gaussian regression model with the inputted data

    Returns
    -------
    calculate_stats(y_test, y_pred) : returns same list as linear regression, except with the values achieved by the 
    gaussian model

    """
    start_time = time.time()
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)
    
    kernel = RBF(length_scale = 1.0) 
    
    #Create final Gaussian Process model 
    gp = GaussianProcessRegressor(kernel = kernel, n_restarts_optimizer=10, random_state=42)
    
    gp.fit(X_train, y_train)  

    #predict values with the test data set to assess Gaussian Model
    y_pred, std = gp.predict(X_test, return_std=True) 
    
    end_time = time.time()
    
    total_time = end_time - start_time
    total_minutes = round((total_time/60), 3)
    print(f"Gaussian model took {total_minutes} minutes to run.")
    
    #Calculate Gaussian Statistics
    return calculate_stats(y_test, y_pred)
#################################################################################################
#Decision Tree Model (Optimized)

def decision_tree_regression(X, y):
    """
    Implements a decision tree regression model with the inputted data

    Returns
    -------
    calculate_stats(y_test, y_pred) : list of statistics specific to the decision tree model's performance

    """
    
    start_time = time.time()
    
    #Split the data into a training set and a test set
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)
    
    tree1 = DecisionTreeRegressor()
    tree1.fit(X_train,y_train)
    
    #Predict values from the X test set
    y_pred=tree1.predict(X_test)
    
    end_time = time.time()
    
    total_time = end_time - start_time
    total_minutes = round((total_time/60), 3)
    print(f"Decision Tree model took {total_minutes} minutes to run.")
    
    #Calculate Decision Tree Stats
    return calculate_stats(y_test, y_pred)
#################################################################################################
#Random Forest Regression Model (Optimized)

def random_forest_regression(X, y):
    """
    Implements a Random Forest regression model with the inputted data

    Returns
    -------
    calculate_stats(y_test, y_pred) : list of statistics specific to the Random Forest model's performance
    """
    
    start_time = time.time()
    
    #Split the data into a training set and a test set
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 5)
    
    #Code the final Random Forest model without optimized parameters
    forest = RandomForestRegressor(n_estimators = 500, min_samples_leaf = 1, random_state = 5)
    forest.fit(X_train, y_train)

    #Predict test set data 
    y_pred = forest.predict(X_test) 
    
    end_time = time.time()
    
    total_time = end_time - start_time
    total_minutes = round((total_time/60), 3)
    print(f"Random Forest model took {total_minutes} minutes to run.")
    
    #Calculate Random Forest Stats
    return calculate_stats(y_test, y_pred)
#################################################################################################
#Conclude program and call the main function
if __name__ == "__main__":
    main()
